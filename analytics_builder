#!/usr/bin/env python3

# $Copyright (c) 2019 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.$
# Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG

import sys, os, pathlib, shutil
import argparse, tempfile

sys.path.append(os.fspath(pathlib.Path(__file__).parent.joinpath('scripts')))

import blockMetadataGenerator, buildExtension, configure_designer, jsonHelper

class Command(object):
	def __init__(self, name, description, sub_commands=None, required=True):
		self.name = name
		self.description = description
		self.sub_commands = sub_commands or []
		self.required = required

class SubCommand(object):
	def __init__(self, name, description, args_provider=None, runner=None, need_tmp_dir=False):
		self.name = name
		self.description = description
		self.args_provider = args_provider
		self.runner = runner
		self.need_tmp_dir = need_tmp_dir


def check_apama_home():
	apama_home = os.getenv('APAMA_HOME', None)
	if not apama_home: raise Exception('Please run this script from an apama_env shell or Apama Command Prompt.')
	if not os.path.exists(apama_home): raise Exception('APAMA_HOME path does not exist: %s' % apama_home)

def main():
	commands = [
		Command('build', 'Build artifacts.', [
			SubCommand('metadata', 'Build block metadata', blockMetadataGenerator.add_arguments, blockMetadataGenerator.run, True),
			SubCommand('extension', 'Build an extension', buildExtension.add_arguments, buildExtension.run, True),
		]),
		Command('json', 'JSON helper.', [
			SubCommand('extract', 'Extract JSON from event files', jsonHelper.add_arguments_extract, jsonHelper.run_json_extract),
			SubCommand('pack', 'Pack JSON into event files', jsonHelper.add_arguments_pack, jsonHelper.run_json_pack),
		]),
		Command('configure', 'Configure artifacts.', [
			SubCommand('designer', 'Configure designer for Analytics Builder', None, configure_designer.run)
		])
	]

	mainparser = argparse.ArgumentParser(description='Analytics Builder Command Line Tool')
	cmd_parser = mainparser.add_subparsers(title='Command', dest='command')
	cmd_parser.required = True

	cmd_map = {} # runners map for dispatching the call
	for c in commands:
		argsp = cmd_parser.add_parser(c.name, help=c.description)
		subparser = argsp.add_subparsers(title='Sub Command', description='Sub Command', dest='subcommand')
		subparser.required = c.required
		if c.name in cmd_map:
			raise Exception(f'Duplicate command {c.name}')

		sub_cmd_map = {}
		cmd_map[c.name] = sub_cmd_map

		for sc in c.sub_commands:
			if sc.name in sub_cmd_map:
				raise Exception(f'Duplicate sub command {sc.name} for command {c.name}')
			if not sc.runner:
				raise Exception(f'No runner provided for {c.name} {sc.name}')

			sub_cmd_map[sc.name] = sc
			sc_parser = subparser.add_parser(sc.name, help=sc.description)
			if sc.args_provider:
				sc.args_provider(sc_parser)
			if sc.need_tmp_dir:
				sc_parser.add_argument('--tmpDir', metavar='DIR', help='Directory to use for any temporary files.')

	args = mainparser.parse_args(sys.argv[1:])
	cmd = cmd_map[args.command][args.subcommand]
	if cmd.need_tmp_dir:
		if args.tmpDir:
			if os.path.exists(args.tmpDir):
				shutil.rmtree(args.tmpDir)
			cmd.runner(args)
		else:
			with tempfile.TemporaryDirectory(prefix='analytics_builder_') as d: # clean it after we are done
				args.tmpDir = d
				cmd.runner(args)
	else:
		cmd.runner(args)

if __name__ == "__main__":
	try:
		check_apama_home()
		main()
	except Exception as e:
		print(f'Command failed: {e}')
		sys.exit(1)
