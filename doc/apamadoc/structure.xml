<?xml version="1.0" encoding="UTF-8" standalone="no"?><Packages><Package depth="../../" display="apama.analyticsbuilder" name="apama.analyticsbuilder"><Type category="Event" name="ConfigurationProperty"><Description><![CDATA[Values from configurable properties which is passed to blocks as one of the action parameters.]]></Description><Summary><![CDATA[Values from configurable properties which is passed to blocks as one of the action parameters.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="timeDelay" type="float"><Description><![CDATA[The maximum delay in seconds before Input blocks consider an event to be old.]]></Description><Summary><![CDATA[The maximum delay in seconds before Input blocks consider an event to be old.]]></Summary><TypeParameters/></Member><Member name="minWaitTime" type="float"><Description><![CDATA[Some blocks can generate output automatically, based on the rate of change of the output. This sets a lower limit on the time between outputs, in seconds.]]></Description><Summary><![CDATA[Some blocks can generate output automatically, based on the rate of change of the output. This sets a lower limit on the time between outputs, in seconds.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Configuration" private="true"><Description><![CDATA[Holder for tunable configuration options.

 Constants and actions on this event can be modified to tune the behaviour of the Analytics Builder runtime.]]></Description><Summary><![CDATA[Holder for tunable configuration options.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="TIMEDELAY_SECS" type="float" typeValue="1.0"><Description><![CDATA[The maximum delay in seconds before Input blocks consider an event to be old.

 Input blocks re-order input events, which is achieved by not processing them until TIMEDELAY_SECS after the timestamp in the object, thus delaying processing by this amount. If the event is delayed in its delivery to the correlator, such that the delay is greater than or equal to this value, then the input is considered old and will be dropped and not processed.]]></Description><Summary><![CDATA[The maximum delay in seconds before Input blocks consider an event to be old.]]></Summary><TypeParameters/></Member><Member constant="true" name="DEFAULT_TIMEOUT_SECS" type="float" typeValue="10.0"><Description><![CDATA[Default timeout for simple request-responses.

 Timeout in seconds applied to request-responses, for example in requests to Cumulocity.]]></Description><Summary><![CDATA[Default timeout for simple request-responses.]]></Summary><TypeParameters/></Member><Member constant="true" name="LOGGING_THROTTLE_SECS" type="float" typeValue="1.0"><Description><![CDATA[Logging throttling in seconds.

 Interval used for periodic logging, such as reporting changes in the number of dropped events by Input blocks (for events delayed by more than TIMEDELAY_SECS).  Log statements will not appear more frequently than this period.]]></Description><Summary><![CDATA[Logging throttling in seconds.]]></Summary><TypeParameters/></Member><Member constant="true" name="MINIMUM_WAIT_TIME_SECS" type="float" typeValue="0.1"><Description><![CDATA[Minimum wait time in seconds.

 Some blocks can generate output automatically, based on the rate of change of the output. This sets a lower limit on the time between outputs, in seconds.]]></Description><Summary><![CDATA[Minimum wait time in seconds.]]></Summary><TypeParameters/></Member><Action name="onModelEnd" staticNature="static "><Description><![CDATA[Report the end of a model.

 Whenever a model is deleted this action is called to report the deletion.

 At a minimum, this would log to the log file.]]></Description><Summary><![CDATA[Report the end of a model.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="name" type="string"><Description><![CDATA[The model name.]]></Description></Parameter><Parameter name="id" type="string"><Description><![CDATA[The model identifier.]]></Description></Parameter><Parameter name="model" type="any"><Description><![CDATA[The whole model.]]></Description></Parameter><Parameter name="modelProperties" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[A copy of the model's properties.]]></Description></Parameter></Parameters></Action><Action name="onModelFailure" staticNature="static "><Description><![CDATA[Report model failure.

 Whenever any type of error (deployment time or during runtime) occurs in the model this action is called to report the error.

 At a minimum, this would log to the log file.]]></Description><Summary><![CDATA[Report model failure.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="name" type="string"><Description><![CDATA[The model name]]></Description></Parameter><Parameter name="id" type="string"><Description><![CDATA[The model identifier]]></Description></Parameter><Parameter name="reason" type="string"><Description><![CDATA[Description of why the model failed]]></Description></Parameter><Parameter name="modelProperties" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[A copy of the model's properties.]]></Description></Parameter><Parameter name="exception" type="com.apama.exceptions.Exception"><Description><![CDATA[If available, the exception. An empty stack trace indicates no exception is available.]]></Description></Parameter></Parameters></Action><Action name="onModelStart" staticNature="static "><Description><![CDATA[Report the start of a model.

 Whenever a model is created this action is called to report the creation.

 At a minimum, this would log to the log file.]]></Description><Summary><![CDATA[Report the start of a model.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="name" type="string"><Description><![CDATA[The model name.]]></Description></Parameter><Parameter name="id" type="string"><Description><![CDATA[The model identifier.]]></Description></Parameter><Parameter name="model" type="any"><Description><![CDATA[The whole model.]]></Description></Parameter><Parameter name="modelProperties" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[A copy of the model's properties.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="MetadataHTTPRequest" private="true"><Description><![CDATA[Incoming HTTP request for metadata.]]></Description><Summary><![CDATA[Incoming HTTP request for metadata.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="requestId" type="string"><TypeParameters/></Member><Member name="path" type="string"><TypeParameters/></Member><Member name="channel" type="string"><TypeParameters/></Member></Type><Type category="Event" name="PromiseHandler" private="true"><Description><![CDATA[Promise done adapter

 Adapts Promise.handlers to separate onValue, onException callbacks.]]></Description><Summary><![CDATA[Promise done adapter]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="onValue" type="action"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[(optional) callback for fulfilling promise.]]></Description><Summary><![CDATA[(optional) callback for fulfilling promise.]]></Summary><TypeParameters/></Member><Member name="onException" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Description><![CDATA[(optional) callback for rejecting promise.]]></Description><Summary><![CDATA[(optional) callback for rejecting promise.]]></Summary><TypeParameters/></Member><Action name="handle" staticNature=""><Description><![CDATA[Call onValue or onException.]]></Description><Summary><![CDATA[Call onValue or onException.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="value" type="any"/><Parameter name="ex" type="optional"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters></Action></Type><Type category="Event" name="Activation"><Description><![CDATA[Representation of a model activation.

 Blocks should never create or store an instance of this. It should be received as a parameter of $process or $timeTriggered actions, and passed to $setOutput actions.]]></Description><Summary><![CDATA[Representation of a model activation.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="timestamp" type="float"><Description><![CDATA[The time of the evaluation.

 Stored as seconds since the Unix Epoch.]]></Description><Summary><![CDATA[The time of the evaluation.]]></Summary><TypeParameters/></Member><Member name="values" private="true" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[The values on all outputs. The output ID is the index within the sequence.]]></Description><Summary><![CDATA[The values on all outputs. The output ID is the index within the sequence.]]></Summary><TypeParameters/></Member><Member name="partition" type="any"><Description><![CDATA[Partition value.]]></Description><Summary><![CDATA[Partition value.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="DroppedEvent" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="evt" type="any"><TypeParameters/></Member><Member constant="true" name="CHANNEL" type="string" typeValue="&quot;AnalyticsDroppedEvents&quot;"><Description><![CDATA[Name of the channel where dropped events are sent.

 All events that are dropped by the input blocks are send to this channel.]]></Description><Summary><![CDATA[Name of the channel where dropped events are sent.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Wire" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="sourceBlockId" type="string"><Description><![CDATA[The ID of the source block.]]></Description><Summary><![CDATA[The ID of the source block.]]></Summary><TypeParameters/></Member><Member name="sourceOutputName" type="string"><Description><![CDATA[The name of the output of the source block.]]></Description><Summary><![CDATA[The name of the output of the source block.]]></Summary><TypeParameters/></Member><Member name="targetBlockId" type="string"><Description><![CDATA[The ID of the target block.]]></Description><Summary><![CDATA[The ID of the target block.]]></Summary><TypeParameters/></Member><Member name="targetInputName" type="string"><Description><![CDATA[The name of the input of the target block.]]></Description><Summary><![CDATA[The name of the input of the target block.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Partition_Broadcast"><Description><![CDATA[Special partition for blocks/ data that applies to all partitions.]]></Description><Summary><![CDATA[Special partition for blocks/ data that applies to all partitions.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="partition" type="any"><Description><![CDATA[identifier of potentially multiple distinct broadcast values.]]></Description><Summary><![CDATA[identifier of potentially multiple distinct broadcast values.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="CreateModel" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="state" package="apama.analyticsbuilder" type="ModelState"><Description><![CDATA[Information about the model to create.]]></Description><Summary><![CDATA[Information about the model to create.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="MetadataHTTPResponse" private="true"><Description><![CDATA[HTTP response for metadata.]]></Description><Summary><![CDATA[HTTP response for metadata.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="requestId" type="string"><TypeParameters/></Member><Member name="statusCode" type="integer"><TypeParameters/></Member><Member name="message" type="any"><TypeParameters/></Member></Type><Type category="Event" name="BlockMetadata" private="true"><Description><![CDATA[Register a new block catalog.

 Typically created by the analytics_builder script.]]></Description><Summary><![CDATA[Register a new block catalog.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="name" type="string"><TypeParameters/></Member><Member name="lang" type="string"><TypeParameters/></Member><Member name="jsonText" type="string"><TypeParameters/></Member></Type><Type category="Event" name="Partition_Grouped" private="true"><Description><![CDATA[Special partition for specifying worker while keeping state partitioned.

 For now, this is an undocumented feature, thus private.]]></Description><Summary><![CDATA[Special partition for specifying worker while keeping state partitioned.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="worker" type="any"><Description><![CDATA[which worker to associate with.

 This can be any type - the value is hashed to determine which worker.]]></Description><Summary><![CDATA[which worker to associate with.]]></Summary><TypeParameters/></Member><Member name="partition" type="any"><Description><![CDATA[identifier of potentially multiple distinct partition values.]]></Description><Summary><![CDATA[identifier of potentially multiple distinct partition values.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Partition_Default"><Description><![CDATA[Denotes a default partition.  This is used if the model is not using independent execution for different partitions.

 In the Cumulocity input blocks, this is used if they are configured with a device, not a device group.]]></Description><Summary><![CDATA[Denotes a default partition.  This is used if the model is not using independent execution for different partitions.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Type><Type category="Event" name="RequestForwarding"><Description><![CDATA[Request forwarding of an event type to workers.]]></Description><Summary><![CDATA[Request forwarding of an event type to workers.]]></Summary><TypeParameters/><Routes><Reference package="apama.analyticsbuilder" type="RequestForwarding"/></Routes><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="eventTypeFQ" private="true" type="string"><Description><![CDATA[Fully qualified name of an event type.]]></Description><Summary><![CDATA[Fully qualified name of an event type.]]></Summary><TypeParameters/></Member><Member name="keyField" private="true" type="optional"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[Key field.

 Which top-level field of the event is the partition value.]]></Description><Summary><![CDATA[Key field.]]></Summary><TypeParameters/></Member><Action name="byKey" staticNature="static "><Description><![CDATA[Request forwarding of an event type partitioned by the specified key field to workers.

 Must be called in the main context (i.e. from a $validate call).]]></Description><Summary><![CDATA[Request forwarding of an event type partitioned by the specified key field to workers.]]></Summary><TypeParameters/><Routes><Reference package="apama.analyticsbuilder" type="RequestForwarding"/></Routes><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="evt" type="any"><Description><![CDATA[An instance of the event to forward.]]></Description></Parameter><Parameter name="field" type="string"><Description><![CDATA[The name of the field to partition by.]]></Description></Parameter></Parameters></Action><Action name="unpartitioned" staticNature="static "><Description><![CDATA[Request forwarding of an event type to workers, without any partitioning.

 Must be called in the main context (i.e. from a $validate call).]]></Description><Summary><![CDATA[Request forwarding of an event type to workers, without any partitioning.]]></Summary><TypeParameters/><Routes><Reference package="apama.analyticsbuilder" type="RequestForwarding"/></Routes><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="evt" type="any"><Description><![CDATA[A prototype of the event to forward.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="Partition_Wildcard"><Description><![CDATA[Special partition for blocks that apply to any partition. A block input or output applies to multiple partition values. (e.g. used for input/ outputs configured with device groups).]]></Description><Summary><![CDATA[Special partition for blocks that apply to any partition. A block input or output applies to multiple partition values. (e.g. used for input/ outputs configured with device groups).]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Type><Type category="Event" name="Partitioner" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends><Reference type="any"/></Sends><Listens><Reference type="any"/></Listens><Spawns/><Member name="numWorkers" type="optional"><Parameters><Parameter type="integer"/></Parameters><TypeParameters/></Member><Member constant="true" name="WORKER_PREFIX" type="string" typeValue="&quot;analyticsbuilder.worker_&quot;"><TypeParameters/></Member><Member constant="true" name="ALL_WORKERS" type="string" typeValue="&quot;analyticsbuilder.allWorkers&quot;"><TypeParameters/></Member><Action name="deAlias" staticNature="static "><Description><![CDATA[Strip out Partition_Alias to return the 'real' device.

 If not a Partition_Alias, return the partition value as is.]]></Description><Summary><![CDATA[Strip out Partition_Alias to return the 'real' device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="p" type="any"/></Parameters></Action><Action name="getWorkerChannelFor" staticNature=""><Description><![CDATA[Get a channel to send events to for a partition]]></Description><Summary><![CDATA[Get a channel to send events to for a partition]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="partition" type="any"/></Parameters></Action><Action name="genericForwarder" staticNature=""><Description><![CDATA[A generic forwarder.

 Forwards all events of type eventTypeFQ to the appropriate worker.]]></Description><Summary><![CDATA[A generic forwarder.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends><Reference type="any"/></Sends><Listens><Reference type="any"/></Listens><Spawns/><Parameters><Parameter name="eventTypeFQ" type="string"><Description><![CDATA[Fully qualified event type name.]]></Description></Parameter><Parameter name="idField" type="optional"><Parameters><Parameter type="string"/></Parameters><Description><![CDATA[field name used as key.]]></Description></Parameter></Parameters></Action><Action name="getNumWorkers" staticNature=""><Description><![CDATA[Get the number of workers.]]></Description><Summary><![CDATA[Get the number of workers.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/></Action><Action name="getWorkerFor" staticNature=""><Description><![CDATA[Get which worker id should handle a partition]]></Description><Summary><![CDATA[Get which worker id should handle a partition]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="partition" type="any"/></Parameters></Action><Action name="get" staticNature="static "><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Partitioner"/></Action><Action name="deAlias_actualDevice" staticNature="static "><Description><![CDATA[Strip out Partition_Alias to return the 'actual' device.

 If not a Partition_Alias, return the partition value as is.]]></Description><Summary><![CDATA[Strip out Partition_Alias to return the 'actual' device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="p" type="any"/></Parameters></Action></Type><Type category="Event" name="L10N"><Description><![CDATA[API for localization of error message.

 Blocks should throw getLocalizedException("msgId", [params]) (or the _basic equivalent), where params can be result of getLocalized(..) (or _basic variant). (the use of 'throw' in the block informs the compiler that that basic block is terminated).]]></Description><Summary><![CDATA[API for localization of error message.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Action name="getLocalizedSubMsg" staticNature="static "><Description><![CDATA[Get a localized sub-message.

 Get a sub-message that can be passed as a member of params to getLocalizedException or getLocalizedSubMsg recursively.]]></Description><Summary><![CDATA[Get a localized sub-message.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[a value that can be passed to getLocalizedException in params.]]></Description></Returns><Parameters><Parameter name="msgId" type="string"><Description><![CDATA[-  a Message ID]]></Description></Parameter><Parameter name="params" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[- a list of parameters - could be simple values (string/ float/ etc) or result from getLocalizedSubMsg.]]></Description></Parameter></Parameters></Action><Action name="getLocalizedException" staticNature="static "><Description><![CDATA[Get a localized exception with parameters.]]></Description><Summary><![CDATA[Get a localized exception with parameters.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="com.apama.exceptions.Exception"/><Parameters><Parameter name="msgId" type="string"><Description><![CDATA[- a Message ID]]></Description></Parameter><Parameter name="params" type="sequence"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[- a list of parameters - could be simple values (string/ float/ etc) or result from getLocalizedSubMsg]]></Description></Parameter></Parameters></Action><Action name="getLocalizedSubMsg_basic" staticNature="static "><Description><![CDATA[Get a localized sub-message.

 Get a sub-message that can be passed as a member of params to getLocalizedException or getLocalizedSubMsg recursively.]]></Description><Summary><![CDATA[Get a localized sub-message.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[a value that can be passed to getLocalizedException in params.]]></Description></Returns><Parameters><Parameter name="msgId" type="string"><Description><![CDATA[-  a Message ID]]></Description></Parameter></Parameters></Action><Action name="getLocalizedException_basic" staticNature="static "><Description><![CDATA[Get a localized exception with no parameters.]]></Description><Summary><![CDATA[Get a localized exception with no parameters.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="com.apama.exceptions.Exception"/><Parameters><Parameter name="msgId" type="string"><Description><![CDATA[- a Message ID]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="PromiseHelper" private="true"><Description><![CDATA[Adapter to ensure promises are only completed once.

 Internal adapter; the fulfill and reject are the actions exposed to the function passed in Promise.create. TODO: is this redundant (Promise has 'settled' which should be the same as done)]]></Description><Summary><![CDATA[Adapter to ensure promises are only completed once.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="onFulfilled" type="action"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[Callback into the promise.

 This event guarantees only onFulfilled or onRejected are called, and only once.]]></Description><Summary><![CDATA[Callback into the promise.]]></Summary><TypeParameters/></Member><Member name="onRejected" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Description><![CDATA[Callback into the promise.

 This event guarantees only onFulfilled or onRejected are called, and only once.]]></Description><Summary><![CDATA[Callback into the promise.]]></Summary><TypeParameters/></Member><Member name="done" type="boolean"><Description><![CDATA[Whether the promise is completed.]]></Description><Summary><![CDATA[Whether the promise is completed.]]></Summary><TypeParameters/></Member><Action name="fulfill" staticNature=""><Description><![CDATA[Fulfill the promise.

 No effect if already done.]]></Description><Summary><![CDATA[Fulfill the promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="value" type="any"/></Parameters></Action><Action name="reject" staticNature=""><Description><![CDATA[Reject the promise.

 No effect if already done.]]></Description><Summary><![CDATA[Reject the promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="ex" type="com.apama.exceptions.Exception"/></Parameters></Action><Action name="doResolve" staticNature="static "><Description><![CDATA[Helper for resolve method.

 Implements at-most-once part of resolve - calls fn, and only the first call into fn's arguments will call to onFulfilled or onRejected. If fn throws, calls onRejected.]]></Description><Summary><![CDATA[Helper for resolve method.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="fn" type="action"><Parameters><Parameter type="action"><Parameters><Parameter type="any"/></Parameters></Parameter><Parameter type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters></Parameter><Parameter name="onFulfilled" type="action"><Parameters><Parameter type="any"/></Parameters></Parameter><Parameter name="onRejected" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters></Action></Type><Type category="Event" name="BlockInfoRequest"><Description><![CDATA[Get all data for a given language.

 Responded to by BlockMetadatAResponse on channel.]]></Description><Summary><![CDATA[Get all data for a given language.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="requestId" type="integer"><TypeParameters/></Member><Member name="lang" type="string"><TypeParameters/></Member><Member name="channel" type="string"><TypeParameters/></Member></Type><Type category="Event" name="PromiseThen" private="true"><Description><![CDATA[Promise then adapter

 Adapts Promise.handlers (via PromiseHandler :TODO - make direct for efficiency) to a bound 'then' or 'catch', and then resolve or reject the next promise in the chain]]></Description><Summary><![CDATA[Promise then adapter]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="resolve" type="action"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[Next promise.resolve]]></Description><Summary><![CDATA[Next promise.resolve]]></Summary><TypeParameters/></Member><Member name="reject" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Description><![CDATA[Next promise.reject]]></Description><Summary><![CDATA[Next promise.reject]]></Summary><TypeParameters/></Member><Member name="boundThen" type="action"><Parameters><Parameter type="any"/></Parameters><Returns type="any"/><Description><![CDATA[andThen callback.

 Optional - callback for this 'then' entry in the promise chain, if set.]]></Description><Summary><![CDATA[andThen callback.]]></Summary><TypeParameters/></Member><Member name="boundCatch" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Returns type="any"/><Description><![CDATA[andCatch callback.

 Optional - callback for this 'catch' entry in the promose chain, if set.]]></Description><Summary><![CDATA[andCatch callback.]]></Summary><TypeParameters/></Member><Action name="doThen" staticNature=""><Description><![CDATA[Previous promise is fulfilled.

 Calls our 'boundThen' if set, and then resolves the next promise. Rejects next promise on an exception.]]></Description><Summary><![CDATA[Previous promise is fulfilled.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="result" type="any"/></Parameters></Action><Action name="doCatch" staticNature=""><Description><![CDATA[Previous promise is rejected.

 Calls our 'boundCatch' if set, and the resolves the next promise. Rejects next promise if boundCatch throws or if boundCatch is empty.]]></Description><Summary><![CDATA[Previous promise is rejected.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="ex" type="com.apama.exceptions.Exception"/></Parameters></Action></Type><Type category="Event" name="ConfigHelper" private="true"><Description><![CDATA[Access configuration properties.

 This type provides methods for getting configuration properties. Note that these calls are not especially cheap; if a value is required while processing events, it is best to query it at startup and re-use the value.]]></Description><Summary><![CDATA[Access configuration properties.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Action name="logMessage" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="propertyName" type="string"/><Parameter name="value" type="string"/><Parameter name="source" type="string"/></Parameters></Action><Action name="getInteger" staticNature="static "><Description><![CDATA[Gets the configurable property of type integer.]]></Description><Summary><![CDATA[Gets the configurable property of type integer.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The name of an event type that has a constant value to use as fallback if not available as a configuration property, or empty string to require the configuration property to be set.]]></Description></Parameter><Parameter name="propertyName" type="string"><Description><![CDATA[The name of the requested property.]]></Description></Parameter></Parameters></Action><Action name="isValidPropertyName" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="propertyName" type="string"><Description><![CDATA[The property name to validate.]]></Description></Parameter></Parameters></Action><Action name="getFloat" staticNature="static "><Description><![CDATA[Gets the configurable property of type float.]]></Description><Summary><![CDATA[Gets the configurable property of type float.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The name of an event type that has a constant value to use as fallback if not available as a configuration property, or empty string to require the configuration property to be set.]]></Description></Parameter><Parameter name="propertyName" type="string"><Description><![CDATA[The name of the requested property.]]></Description></Parameter></Parameters></Action><Action name="getString" staticNature="static "><Description><![CDATA[Gets the configurable property of type string.]]></Description><Summary><![CDATA[Gets the configurable property of type string.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The name of an event type that has a constant value to use as fallback if not available as a configuration property, or empty string to require the configuration property to be set.]]></Description></Parameter><Parameter name="propertyName" type="string"><Description><![CDATA[The name of the requested property.]]></Description></Parameter></Parameters></Action><Action name="getAny" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[Exception if propertyName is not valid or if property is not configured.]]></Description></Throws><Returns type="any"/><Parameters><Parameter name="eventType" type="string"><Description><![CDATA[The name of an event type that has a constant value to use as fallback if not available as a configuration property, or empty string to require the configuration property to be set.]]></Description></Parameter><Parameter name="propertyName" type="string"><Description><![CDATA[The name of the requested property.]]></Description></Parameter></Parameters></Action><Action name="mapPropertyToConstant" private="true" staticNature="static "><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="propertyName" type="string"/></Parameters></Action></Type><Type category="Event" name="ABConstants"><Description><![CDATA[Constants for entries in $modelScopeParameters.]]></Description><Summary><![CDATA[Constants for entries in $modelScopeParameters.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="MODEL_NAME_IDENTIFIER" type="string" typeValue="&quot;apama_analytics_modelName&quot;"><Description><![CDATA[The key for the model name in $modelScopeParameters.]]></Description><Summary><![CDATA[The key for the model name in $modelScopeParameters.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_IDENTIFIER" type="string" typeValue="&quot;apama_analytics_mode&quot;"><Description><![CDATA[The key for model mode (PRODUCTION, TEST or SIMULATION) in $modelScopeParameters.]]></Description><Summary><![CDATA[The key for model mode (PRODUCTION, TEST or SIMULATION) in $modelScopeParameters.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_PROPERTIES_IDENTIFIER" type="string" typeValue="&quot;apama_analytics_modeProperties&quot;"><Description><![CDATA[The identifier for mode properties (a dictionary containing startTime, endTime) in $modelScopeParameters.]]></Description><Summary><![CDATA[The identifier for mode properties (a dictionary containing startTime, endTime) in $modelScopeParameters.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="ModelState" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="modelId" type="string"><Description><![CDATA[The ID of the model.]]></Description><Summary><![CDATA[The ID of the model.]]></Summary><TypeParameters/></Member><Member name="blocks" type="dictionary"><Parameters><Parameter type="string"/><Parameter package="apama.analyticsbuilder" type="BlockConfiguration"/></Parameters><Description><![CDATA[Dictionary of all the block instances in the model. The keys in the dictionary are block IDs.]]></Description><Summary><![CDATA[Dictionary of all the block instances in the model. The keys in the dictionary are block IDs.]]></Summary><TypeParameters/></Member><Member name="wires" type="sequence"><Parameters><Parameter package="apama.analyticsbuilder" type="Wire"/></Parameters><Description><![CDATA[All of the wires.]]></Description><Summary><![CDATA[All of the wires.]]></Summary><TypeParameters/></Member><Member name="modelScopeParameters" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[Model scoped parameters.]]></Description><Summary><![CDATA[Model scoped parameters.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="BlockMessages" private="true"><Description><![CDATA[Register a new set of messages.

 Typically created by the analytics_builder script.]]></Description><Summary><![CDATA[Register a new set of messages.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="name" type="string"><TypeParameters/></Member><Member name="lang" type="string"><TypeParameters/></Member><Member name="jsonText" type="string"><TypeParameters/></Member></Type><Type category="Event" name="BlockConfiguration" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="type" type="string"><Description><![CDATA[The fully qualified name of the block type.]]></Description><Summary><![CDATA[The fully qualified name of the block type.]]></Summary><TypeParameters/></Member><Member name="parameters" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The values for the block parameters. The keys are parameter names and the values are parameter values. It is an error to specify a value for non-existing parameters. It is an error to not specify a value for a required parameter. It is also an error to specify a parameter value of an incorrect type.]]></Description><Summary><![CDATA[The values for the block parameters. The keys are parameter names and the values are parameter values. It is an error to specify a value for non-existing parameters. It is an error to not specify a value for a required parameter. It is also an error to specify a parameter value of an incorrect type.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="NameValue"><Description><![CDATA[The event for a dynamic property.]]></Description><Summary><![CDATA[The event for a dynamic property.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="name" type="string"><Description><![CDATA[The name of the property.]]></Description><Summary><![CDATA[The name of the property.]]></Summary><TypeParameters/></Member><Member name="value" type="any"><Description><![CDATA[The value of the property.]]></Description><Summary><![CDATA[The value of the property.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Partition_Alias"><Description><![CDATA[Denotes an 'alias' device.

 This is used in simulation mode and test mode to declare the real and virtual devices. In terms of checking for cycles and what model to model interactions are used, the <tt>realDevice</tt> member is used, but the block actually listens to events identified by the <tt>virtualDevice</tt> field.

 Can be passed to BlockBase.sendsOutput or BlockBase.listensForInput to denote sending to a virtual device.]]></Description><Summary><![CDATA[Denotes an 'alias' device.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="realDevice" type="any"><Description><![CDATA[Partition value of the 'real' device. This is the partition that the model should be treated as consuming/ sending for purposes of model to model interactions.]]></Description><Summary><![CDATA[Partition value of the 'real' device. This is the partition that the model should be treated as consuming/ sending for purposes of model to model interactions.]]></Summary><TypeParameters/></Member><Member name="virtualDevice" type="any"><Description><![CDATA[Partition value of the 'virtual' device, which is or the value that will be present in events.]]></Description><Summary><![CDATA[Partition value of the 'virtual' device, which is or the value that will be present in events.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="Promise"><Description><![CDATA[An asynchronous promise result.

 A promise represents something that may be fulfilled (with an 'any' value) or rejected (with an Exception) later. Promises can be chained, to make linear asynchronous chains of calls. The 'then' methods (andThen, thenOrCatch) take an action which returns an any - if that any is a Promise, then it is waited on until any 'then' actions are called.

 Promises are created with the static 'create' action, which takes an 'fn' action to call. This function is passed the fulfill and reject actions. (this pattern ensures that exceptions thrown by the 'fn' action are caught and reject the promise).]]></Description><Summary><![CDATA[An asynchronous promise result.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="returnValue" private="true" type="any"><Description><![CDATA[The return value, if there is one.]]></Description><Summary><![CDATA[The return value, if there is one.]]></Summary><TypeParameters/></Member><Member name="settled" private="true" type="boolean"><Description><![CDATA[Promise is fulfilled or has been rejected.]]></Description><Summary><![CDATA[Promise is fulfilled or has been rejected.]]></Summary><TypeParameters/></Member><Member name="exception" private="true" type="optional"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Description><![CDATA[The exception if failed.]]></Description><Summary><![CDATA[The exception if failed.]]></Summary><TypeParameters/></Member><Member name="handlers" private="true" type="sequence"><Parameters><Parameter type="action"><Parameters><Parameter type="any"/><Parameter type="optional"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters></Parameter></Parameters><Description><![CDATA[The callbakcs registered against this promise.]]></Description><Summary><![CDATA[The callbakcs registered against this promise.]]></Summary><TypeParameters/></Member><Action name="thenOrCatch" private="true" staticNature=""><Description><![CDATA[Execute a function after this promise is completed.

 Executes onThen or onCatch once this promise is fulfilled or rejected Returns a Promise of the result of onThen or onCatch (or a rejected promise if an uncaught exception occurs).]]></Description><Summary><![CDATA[Execute a function after this promise is completed.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"><Description><![CDATA[a Promise of the result of the cb method (or rejected on exception)]]></Description></Returns><Parameters><Parameter name="onThen" type="action"><Parameters><Parameter type="any"/></Parameters><Returns type="any"/><Description><![CDATA[optional action to call when this promise is fulfilled with a concrete value.]]></Description></Parameter><Parameter name="onCatch" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Returns type="any"/><Description><![CDATA[optional action to call when this promise is rejected.]]></Description></Parameter></Parameters></Action><Action name="resolve" staticNature="static "><Description><![CDATA[Convert a promise or non-promise into a promise.

 Can be used to convert sync 'bare' values into async promises.]]></Description><Summary><![CDATA[Convert a promise or non-promise into a promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="value" type="any"><Description><![CDATA[the promise to resolve the promise to, or if it is a promise, to get the result from]]></Description></Parameter></Parameters></Action><Action name="_fulfill" private="true" staticNature=""><Description><![CDATA[Fulfills this promise.

 If value is another Promise, we chain ourselves to that promise - i.e. we are done when it is.

 This must not be called directly by users (we don't trust them to call it only once). The user's func action passed to 'create' is passed a closures over PromiseHelper to ensure this is called once.]]></Description><Summary><![CDATA[Fulfills this promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="value" type="any"/></Parameters></Action><Action name="reject" staticNature="static "><Description><![CDATA[Convert an exception into a rejected promise.]]></Description><Summary><![CDATA[Convert an exception into a rejected promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="e" type="com.apama.exceptions.Exception"><Description><![CDATA[an Exception describing the failure.]]></Description></Parameter></Parameters></Action><Action name="andCatch" staticNature=""><Description><![CDATA[Catch an async exception.

 Executes cb if this promise is rejected.]]></Description><Summary><![CDATA[Catch an async exception.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[a Promise of the result of the cb method (or this promise's value if it is not rejected)]]></Description></Returns><Parameters><Parameter name="cb" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Returns type="any"/><Description><![CDATA[called if the promise is rejected.]]></Description></Parameter></Parameters></Action><Action name="_reject" private="true" staticNature=""><Description><![CDATA[Reject this promise.

 This must not be called directly by users (we don't trust them to call it only once). The user's func action passed to 'create' is passed a closures over PromiseHelper to ensure this is called once.]]></Description><Summary><![CDATA[Reject this promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="e" type="com.apama.exceptions.Exception"/></Parameters></Action><Action name="_fulfill_return" private="true" staticNature=""><Description><![CDATA[Fulfill the promise.

 Convenience variant that returns new any.]]></Description><Summary><![CDATA[Fulfill the promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="value" type="any"/></Parameters></Action><Action name="_reject_return" private="true" staticNature=""><Description><![CDATA[Reject the promise.

 Convenience variant that returns new any.]]></Description><Summary><![CDATA[Reject the promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"/><Parameters><Parameter name="value" type="com.apama.exceptions.Exception"/></Parameters></Action><Action name="create" staticNature="static "><Description><![CDATA[Create a promise.

 The func is called immediately, but it may call the any or Exception functions at any point in the future. Only the first call is used.  Calling the first function with a promise will wait for that to be fulfilled before fulfilling this promise.]]></Description><Summary><![CDATA[Create a promise.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="Promise"/><Parameters><Parameter name="func" type="action"><Parameters><Parameter type="action"><Parameters><Parameter type="any"/></Parameters></Parameter><Parameter type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters></Parameter></Parameters><Description><![CDATA[function to compute the promise value, setting the value by calling one of the two function parameters.]]></Description></Parameter></Parameters></Action><Action name="done" private="true" staticNature=""><Description><![CDATA[Register callback.

 Callback that is always executed after the caller has completed once the promise is settled.

 One of onFulfilled, onRejected will be called.]]></Description><Summary><![CDATA[Register callback.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="onFulfilled" type="action"><Parameters><Parameter type="any"/></Parameters><Description><![CDATA[callback called when the promise is fulfilled.]]></Description></Parameter><Parameter name="onRejected" type="action"><Parameters><Parameter type="com.apama.exceptions.Exception"/></Parameters><Description><![CDATA[callback called when the promise is rejected.]]></Description></Parameter></Parameters></Action><Action name="_nowSettled" private="true" staticNature=""><Description><![CDATA[This promise is now settled.

 Called from reject/ fulfill (once it has a non-Promise value).]]></Description><Summary><![CDATA[This promise is now settled.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="andThen" staticNature=""><Description><![CDATA[Execute a function after this promise is completed.

 Executes cb once this promise is fulfilled with a real (non-promise) value.  Returns a Promise of the result of cb (or the result of the result of cb if it is a Promise)]]></Description><Summary><![CDATA[Execute a function after this promise is completed.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[a Promise of the result of the cb method (or rejected on exception)]]></Description></Returns><Parameters><Parameter name="cb" type="action"><Parameters><Parameter type="any"/></Parameters><Returns type="any"/><Description><![CDATA[callback called when the promise is fulfilled.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="TimerParams"><Description><![CDATA[Parameters for creating a timer.]]></Description><Summary><![CDATA[Parameters for creating a timer.]]></Summary><TypeParameters/><See action="createTimerWith" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[Use this action to create a timer with the parameters.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="payload" private="true" type="any"><Description><![CDATA[The payload which will be passed when calling $timerTriggered action after the timer is triggered.]]></Description><Summary><![CDATA[The payload which will be passed when calling $timerTriggered action after the timer is triggered.]]></Summary><TypeParameters/></Member><Member name="time" private="true" type="float"><Description><![CDATA[The timer time. The exact interpretation of the value depends on the mode.]]></Description><Summary><![CDATA[The timer time. The exact interpretation of the value depends on the mode.]]></Summary><TypeParameters/></Member><Member name="mode" private="true" type="integer"><Description><![CDATA[The timer mode.]]></Description><Summary><![CDATA[The timer mode.]]></Summary><TypeParameters/></Member><Member name="partition" private="true" type="any"><Description><![CDATA[The partition value.]]></Description><Summary><![CDATA[The partition value.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_RELATIVE" private="true" type="integer" typeValue="0"><Description><![CDATA[The relative mode for the timer.]]></Description><Summary><![CDATA[The relative mode for the timer.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_ABSOLUTE" private="true" type="integer" typeValue="1"><Description><![CDATA[The absolute mode for the time.]]></Description><Summary><![CDATA[The absolute mode for the time.]]></Summary><TypeParameters/></Member><Member constant="true" name="MODE_RECURRING" private="true" type="integer" typeValue="2"><Description><![CDATA[The recurring timer mode.]]></Description><Summary><![CDATA[The recurring timer mode.]]></Summary><TypeParameters/></Member><Action name="withPartition" staticNature=""><Description><![CDATA[Specify partition which will be supplied back when $timerTriggered action is called. Defaults to empty.]]></Description><Summary><![CDATA[Specify partition which will be supplied back when $timerTriggered action is called. Defaults to empty.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[The TimerParams with the partition value.]]></Description></Returns><Parameters><Parameter name="partition" type="any"><Description><![CDATA[The partition.]]></Description></Parameter></Parameters></Action><Action name="absolute" staticNature="static "><Description><![CDATA[Create a TimerParams for creating a timer for an absolute time.

 The maximum time delay possible for input events is taken into account when determining the actual trigger time.]]></Description><Summary><![CDATA[Create a TimerParams for creating a timer for an absolute time.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[A new TimerParams for creating a timer for an absolute time.]]></Description></Returns><Parameters><Parameter name="timeSec" type="float"><Description><![CDATA[The absolute time in seconds at which timer should be triggered.]]></Description></Parameter></Parameters></Action><Action name="recurring" staticNature="static "><Description><![CDATA[Create a TimerParams for creating a recurring timer.

 The timer is triggered every specified interval in seconds.]]></Description><Summary><![CDATA[Create a TimerParams for creating a recurring timer.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[A new TimerParams for creating a recurring timer.]]></Description></Returns><Parameters><Parameter name="intervalSec" type="float"><Description><![CDATA[The interval in seconds.]]></Description></Parameter></Parameters></Action><Action name="withPayload" staticNature=""><Description><![CDATA[Specify payload which will be supplied back when $timerTriggered action is called.]]></Description><Summary><![CDATA[Specify payload which will be supplied back when $timerTriggered action is called.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[The TimerParams with the payload.]]></Description></Returns><Parameters><Parameter name="payload" type="any"><Description><![CDATA[The payload data.]]></Description></Parameter></Parameters></Action><Action name="relative" staticNature="static "><Description><![CDATA[Create a TimerParams for creating a timer for a relative time.

 The timer is triggered after the specified duration from the timer creation time.]]></Description><Summary><![CDATA[Create a TimerParams for creating a timer for a relative time.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[A new TimerParams for creating a timer for a relative time.]]></Description></Returns><Parameters><Parameter name="durationSec" type="float"><Description><![CDATA[The duration in seconds after which the timer should be triggered.]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="BlockInfoResponse"><Description><![CDATA[Response of BlockInfoRequest.]]></Description><Summary><![CDATA[Response of BlockInfoRequest.]]></Summary><TypeParameters/><See package="apama.analyticsbuilder" type="BlockInfoRequest"><Description/></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="blocks" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="sequence"><Parameters><Parameter type="any"/></Parameters></Parameter></Parameters><Description><![CDATA[Catalog name to list of block descriptions]]></Description><Summary><![CDATA[Catalog name to list of block descriptions]]></Summary><TypeParameters/></Member><Member name="messages" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="dictionary"><Parameters><Parameter type="string"/><Parameter type="string"/></Parameters></Parameter></Parameters><Description><![CDATA[Catalog name to map fo messages (id: message)]]></Description><Summary><![CDATA[Catalog name to map fo messages (id: message)]]></Summary><TypeParameters/></Member><Member name="requestId" type="integer"><Description><![CDATA[correlation id]]></Description><Summary><![CDATA[correlation id]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="BlockBase"><Description><![CDATA[The base event for all blocks. Every block implementation must have a field named '$base' of this event type.

 This provides a number of methods for blocks to interact with the framework.]]></Description><Summary><![CDATA[The base event for all blocks. Every block implementation must have a field named '$base' of this event type.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="PROFILE_OUTPUT" type="integer" typeValue="0"><Description><![CDATA[Pass to the profile action when a block generates an output external to the model.]]></Description><Summary><![CDATA[Pass to the profile action when a block generates an output external to the model.]]></Summary><TypeParameters/></Member><Member constant="true" name="PROFILE_DROPPED" private="true" type="integer" typeValue="1"><Description><![CDATA[Used to report dropped event for profiling.]]></Description><Summary><![CDATA[Used to report dropped event for profiling.]]></Summary><TypeParameters/></Member><Member name="createBlockTimer" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder" type="TimerParams"/><Parameter type="string"/></Parameters><Returns package="apama.analyticsbuilder" type="TimerHandle"/><Description/><Summary/><TypeParameters/></Member><Member name="cancelBlockTimer" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder" type="TimerHandle"/></Parameters><Description/><Summary/><TypeParameters/></Member><Member name="blockProcess" private="true" type="optional"><Parameters><Parameter type="apama.analyticsbuilder.framework.Action"/></Parameters><Description><![CDATA[The $process action of a block. Called if block has inputs.]]></Description><Summary><![CDATA[The $process action of a block. Called if block has inputs.]]></Summary><TypeParameters/></Member><Member name="timerTriggered" private="true" type="optional"><Parameters><Parameter type="apama.analyticsbuilder.framework.Action"/></Parameters><Description><![CDATA[The $timerTriggered action of a block. Called when timer is expired.]]></Description><Summary><![CDATA[The $timerTriggered action of a block. Called when timer is expired.]]></Summary><TypeParameters/></Member><Member name="fastTimerTriggered" private="true" type="action"><Parameters><Parameter package="apama.analyticsbuilder" type="Activation"/><Parameter type="any"/></Parameters><Description><![CDATA[The direct reference to non-generic version of the $timerTriggered action if it matches specific signature. Used for faster invocation if present.]]></Description><Summary><![CDATA[The direct reference to non-generic version of the $timerTriggered action if it matches specific signature. Used for faster invocation if present.]]></Summary><TypeParameters/></Member><Member name="modelSchema" private="true" type="apama.analyticsbuilder.framework.ModelSchema"><Description><![CDATA[Shared state required by all blocks.]]></Description><Summary><![CDATA[Shared state required by all blocks.]]></Summary><TypeParameters/></Member><Member name="blockDoesIO" private="true" type="action"><Parameters><Parameter type="string"/><Parameter type="apama.analyticsbuilder.framework.BlockIO"/></Parameters><Description><![CDATA[Inform EvalManager of this block's input/ output. Callback to Framework. Arguments are INPUT/OUTPUT, BlockIO that identifies the stream.]]></Description><Summary><![CDATA[Inform EvalManager of this block's input/ output. Callback to Framework. Arguments are INPUT/OUTPUT, BlockIO that identifies the stream.]]></Summary><TypeParameters/></Member><Member constant="true" name="INPUT" private="true" type="string" typeValue="&quot;INPUT&quot;"><Description><![CDATA[Potential value for first argument of blockDoesIO.]]></Description><Summary><![CDATA[Potential value for first argument of blockDoesIO.]]></Summary><TypeParameters/></Member><Member constant="true" name="OUTPUT" private="true" type="string" typeValue="&quot;OUTPUT&quot;"><Description><![CDATA[Potential value for first argument of blockDoesIO.]]></Description><Summary><![CDATA[Potential value for first argument of blockDoesIO.]]></Summary><TypeParameters/></Member><Member name="inputTypeInfo" private="true" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="apama.analyticsbuilder.framework.ActionParamInfo"/></Parameters><Description><![CDATA[The type info of the inputs, keyed by full input name (input[.<index>] - index if multi-valued.)]]></Description><Summary><![CDATA[The type info of the inputs, keyed by full input name (input[.<index>] - index if multi-valued.)]]></Summary><TypeParameters/></Member><Member name="modelState" private="true" type="apama.analyticsbuilder.framework.ModelRuntimeState"><Description><![CDATA[Current model runtime state.]]></Description><Summary><![CDATA[Current model runtime state.]]></Summary><TypeParameters/></Member><Member name="blockId" private="true" type="string"><Description><![CDATA[The ID of the block instance.]]></Description><Summary><![CDATA[The ID of the block instance.]]></Summary><TypeParameters/></Member><Member name="blockType" private="true" type="string"><Description><![CDATA[The type of the block instance.]]></Description><Summary><![CDATA[The type of the block instance.]]></Summary><TypeParameters/></Member><Member name="blockState" private="true" type="any"><Description><![CDATA[Current block runtime state.]]></Description><Summary><![CDATA[Current block runtime state.]]></Summary><TypeParameters/></Member><Member name="blockIndex" private="true" type="integer"><Description><![CDATA[The index of the block in the evaluation order. Used to directly access block from list of blocks order by evaluation order.]]></Description><Summary><![CDATA[The index of the block in the evaluation order. Used to directly access block from list of blocks order by evaluation order.]]></Summary><TypeParameters/></Member><Member name="receivesFromChain" private="true" type="boolean"><Description><![CDATA[Mark if this block is receiving inputs from model chain.]]></Description><Summary><![CDATA[Mark if this block is receiving inputs from model chain.]]></Summary><TypeParameters/></Member><Member name="blockProfiled" private="true" type="action"><Parameters><Parameter type="integer"/></Parameters><Description><![CDATA[Report block profiling.]]></Description><Summary><![CDATA[Report block profiling.]]></Summary><TypeParameters/></Member><Action name="getInputCount" staticNature=""><Description><![CDATA[Get the number of connections for an input.]]></Description><Summary><![CDATA[Get the number of connections for an input.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="integer"/><Parameters><Parameter name="input" type="string"/></Parameters></Action><Action name="getInputTypeName" staticNature=""><Description><![CDATA[Get the type name of an input.]]></Description><Summary><![CDATA[Get the type name of an input.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/><Parameters><Parameter name="input" type="string"/></Parameters></Action><Action name="profile" staticNature=""><Description><![CDATA[Called by blocks to notify of an operation performed for profiling purpose.]]></Description><Summary><![CDATA[Called by blocks to notify of an operation performed for profiling purpose.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="type" type="integer"><Description><![CDATA[The type of the oparation. See the constants starting with PROFILE for supported profiling operations.]]></Description></Parameter></Parameters></Action><Action name="getL10N_input" staticNature=""><Description><![CDATA[Get a localized sub-message to identify an input

 Get a sub-message object that can be passed as a member of params to getLocalizedException or getLocalizedSubMsg.]]></Description><Summary><![CDATA[Get a localized sub-message to identify an input]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[localized sub-message]]></Description></Returns><Parameters><Parameter name="inputId" type="string"><Description><![CDATA[the input (without $input_ prefix)]]></Description></Parameter></Parameters></Action><Action name="getL10N_param" staticNature="static "><Description><![CDATA[Get a localized sub-message to identify a parameter.

 Get a sub-message that can be passed as a member of params to getLocalizedException or getLocalizedSubMsg.]]></Description><Summary><![CDATA[Get a localized sub-message to identify a parameter.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[localized sub-message.]]></Description></Returns><Parameters><Parameter name="parameterId" type="string"><Description><![CDATA[the parameter]]></Description></Parameter><Parameter name="blockOrParam" type="any"><Description><![CDATA[the block or parameters object (or a BlockBase object)]]></Description></Parameter></Parameters></Action><Action name="throwsOnEmpty" staticNature="static "><Description><![CDATA[Throws if value is empty.

 Use to validate a string parameter that should not be empty.]]></Description><Summary><![CDATA[Throws if value is empty.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="value" type="string"><Description><![CDATA[that should not be empty]]></Description></Parameter><Parameter name="paramId" type="string"><Description><![CDATA[the name of the field (this will be translated)]]></Description></Parameter><Parameter name="blockOrParam" type="any"><Description><![CDATA[the block or parameters object (or a BlockBase object)]]></Description></Parameter></Parameters></Action><Action name="getBlockId" staticNature=""><Description><![CDATA[Get the block ID. Useful for debugging only.]]></Description><Summary><![CDATA[Get the block ID. Useful for debugging only.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="string"/></Action><Action name="getModelTime" staticNature=""><Description><![CDATA[The current effective model time. This should be used instead of <tt>currentTime</tt> when access to the current time is required. The time for any absolute timer must be greater than this value.]]></Description><Summary><![CDATA[The current effective model time. This should be used instead of <tt>currentTime</tt> when access to the current time is required. The time for any absolute timer must be greater than this value.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="float"/></Action><Action name="isValueTypeCompatibleWithInput" private="true" staticNature=""><Description><![CDATA[Check if the valueType is compatible with the input type.]]></Description><Summary><![CDATA[Check if the valueType is compatible with the input type.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="boolean"/><Parameters><Parameter name="inputName" type="string"/><Parameter name="valueType" type="string"/></Parameters></Action><Action name="checkTimerTriggeredDefined" private="true" staticNature=""><Description><![CDATA[Check if a $timerTriggered action is defined by the block.]]></Description><Summary><![CDATA[Check if a $timerTriggered action is defined by the block.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/></Action><Action name="createTimerWith" staticNature=""><Description><![CDATA[Create a timer with the specified parameters. The $timerTriggered action of the block is called when the timer is triggered.]]></Description><Summary><![CDATA[Create a timer with the specified parameters. The $timerTriggered action of the block is called when the timer is triggered.]]></Summary><TypeParameters/><See action="cancelTimer" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[Use this action to cancel the timer.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns package="apama.analyticsbuilder" type="TimerHandle"><Description><![CDATA[The handle to the created timer which can be used to cancel it.]]></Description></Returns><Parameters><Parameter name="timerParams" package="apama.analyticsbuilder" type="TimerParams"><Description><![CDATA[The parameters for specifying the timer type and other information about it.]]></Description></Parameter></Parameters></Action><Action name="getL10N_output" staticNature=""><Description><![CDATA[Get a localized sub-message to identify an output.

 Get a sub-message that can be passed as a member of params to getLocalizedException or getLocalizedSubMsg.]]></Description><Summary><![CDATA[Get a localized sub-message to identify an output.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="any"><Description><![CDATA[localized sub-message.]]></Description></Returns><Parameters><Parameter name="outputId" type="string"><Description><![CDATA[the output (without $setOutput_ prefix)]]></Description></Parameter></Parameters></Action><Action name="cancelTimer" staticNature=""><Description><![CDATA[Cancel the timer specified by the timer handle.]]></Description><Summary><![CDATA[Cancel the timer specified by the timer handle.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Throws><Description><![CDATA[<tt>IllegalArgumentException</tt> if the timer is already canceled or triggered.]]></Description></Throws><Parameters><Parameter name="handle" package="apama.analyticsbuilder" type="TimerHandle"><Description><![CDATA[The handle to a previously created timer.]]></Description></Parameter></Parameters></Action><Action name="sendsOutput" staticNature=""><Description><![CDATA[Notify framework that this block is an output block.

 An output block sends events to outside the model, potentially to other models. This must be called during $validate, not afterwards.]]></Description><Summary><![CDATA[Notify framework that this block is an output block.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="eventTypeName" type="string"><Description><![CDATA[The fully-qualified type name the block sends.]]></Description></Parameter><Parameter name="fields" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The field values the block sends that, together with partitionValue, identifies a stream of events.]]></Description></Parameter><Parameter name="partitionValue" type="any"><Description><![CDATA[The value that identifies a partition of events.]]></Description></Parameter></Parameters></Action><Action name="callProcess" private="true" staticNature=""><Description><![CDATA[Call $process action. Get values for the inputs from the activation.]]></Description><Summary><![CDATA[Call $process action. Get values for the inputs from the activation.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="cc" type="apama.analyticsbuilder.framework.CallContext"/></Parameters></Action><Action name="listensForInput" staticNature=""><Description><![CDATA[Notify framework that this block is an input block.

 An input block receives events from outside the model, potentially from other models. This must be called during $validate, not afterwards.]]></Description><Summary><![CDATA[Notify framework that this block is an input block.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="eventTypeName" type="string"><Description><![CDATA[The fully-qualified type name the block listens for.]]></Description></Parameter><Parameter name="fields" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[The field values the block sends that, together with partitionValue, identifies a stream of events.]]></Description></Parameter><Parameter name="partitionValue" type="any"><Description><![CDATA[The value that identifies a partition of events.]]></Description></Parameter></Parameters></Action><Action name="createTimer" staticNature=""><Description><![CDATA[Create a timer with the specified duration. The $timerTriggered action of the block is called when the timer is triggered.]]></Description><Summary><![CDATA[Create a timer with the specified duration. The $timerTriggered action of the block is called when the timer is triggered.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="durationSec" type="float"><Description><![CDATA[The duration in seconds after which the timer should be triggered.]]></Description></Parameter><Parameter name="payload" type="any"><Description><![CDATA[The payload value which will be supplied back when $timerTriggred action is called.]]></Description></Parameter></Parameters></Action><Action name="droppedEvent" staticNature=""><Description><![CDATA[Notify framework that this block has dropped an input event.]]></Description><Summary><![CDATA[Notify framework that this block has dropped an input event.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Parameters><Parameter name="evt" type="any"><Description><![CDATA[the event that was dropped]]></Description></Parameter><Parameter name="time" type="float"><Description><![CDATA[the timestamp]]></Description></Parameter></Parameters></Action></Type><Type category="Event" name="Value"><Description><![CDATA[The value with extra properties.]]></Description><Summary><![CDATA[The value with extra properties.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="value" type="any"><Description><![CDATA[The primary value.

 This should typically be a string, float or boolean.  A Value wire can be connected to a simple input, and only this value will be used.]]></Description><Summary><![CDATA[The primary value.]]></Summary><TypeParameters/></Member><Member name="timestamp" type="float"><Description><![CDATA[The time of the signal.]]></Description><Summary><![CDATA[The time of the signal.]]></Summary><TypeParameters/></Member><Member name="properties" type="dictionary"><Parameters><Parameter type="string"/><Parameter type="any"/></Parameters><Description><![CDATA[Extra properties associated with the value.]]></Description><Summary><![CDATA[Extra properties associated with the value.]]></Summary><TypeParameters/></Member></Type><Type category="Event" name="ConfigPropertyData" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member constant="true" name="PROPERTY_NAME_PREFIX" type="string" typeValue="&quot;analyticsBuilder.&quot;"><TypeParameters/></Member><Member constant="true" name="STATUS_PROPERTY_PREFIX" type="string" typeValue="&quot;status_&quot;"><TypeParameters/></Member><Member constant="true" name="METADATA_PORT_PROPERTY_NAME" type="string" typeValue="&quot;serve-metadata.port&quot;"><TypeParameters/></Member><Member constant="true" name="NUM_WORKERS_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.numWorkerThreads&quot;"><TypeParameters/></Member><Member constant="true" name="TIME_DELAY_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.timedelay_secs&quot;"><TypeParameters/></Member><Member constant="true" name="DEFAULT_TIMEOUT_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.default_timeout_secs&quot;"><TypeParameters/></Member><Member constant="true" name="LOGGING_THROTTLE_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.logging_throttle_secs&quot;"><TypeParameters/></Member><Member constant="true" name="MINIMUM_WAIT_TIME_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.minimum_wait_time_secs&quot;"><TypeParameters/></Member><Member constant="true" name="STATUS_PERIOD_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.status_period_secs&quot;"><TypeParameters/></Member><Member constant="true" name="MATCH_STRING_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.status_device_name&quot;"><TypeParameters/></Member><Member constant="true" name="SEND_TYPE_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.status_send_type&quot;"><TypeParameters/></Member><Member constant="true" name="EVENT_TYPE_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.status_event_type&quot;"><TypeParameters/></Member><Member constant="true" name="EVENT_TEXT_PROPERTY_NAME" type="string" typeValue="&quot;analyticsBuilder.status_event_text&quot;"><TypeParameters/></Member><Action name="getStatusProperties" staticNature="static "><Description><![CDATA[Returns a dictionary with the key configurable properties.]]></Description><Summary><![CDATA[Returns a dictionary with the key configurable properties.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="dictionary"><Parameters><Parameter type="string"/><Parameter type="string"/></Parameters></Returns></Action><Action name="getKeyProperties" staticNature="static "><Description><![CDATA[Returns a dictionary with the key configurable properties.]]></Description><Summary><![CDATA[Returns a dictionary with the key configurable properties.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Returns type="dictionary"><Parameters><Parameter type="string"/><Parameter type="boolean"/></Parameters></Returns></Action></Type><Type category="Event" name="TimerHandle"><Description><![CDATA[A handle to a created timer.]]></Description><Summary><![CDATA[A handle to a created timer.]]></Summary><TypeParameters/><See action="cancelTimer" package="apama.analyticsbuilder" type="BlockBase"><Description><![CDATA[Use this action to cancel the timer.]]></Description></See><Routes/><Emits/><Enqueues/><Sends/><Listens/><Spawns/><Member name="id" type="string"><Description><![CDATA[The unique id of the timer.]]></Description><Summary><![CDATA[The unique id of the timer.]]></Summary><TypeParameters/></Member></Type><Type category="Monitor" name="BlockCatalogRegistry" private="true"><Description><![CDATA[Repository of the block catalog information.

 Stores a copy of all block information as it is registered, and responds to get requests either from HTTP connectivity or internal apps.]]></Description><Summary><![CDATA[Repository of the block catalog information.]]></Summary><TypeParameters/><Routes/><Emits/><Enqueues/><Sends><Reference package="apama.analyticsbuilder" type="BlockInfoResponse"/></Sends><Listens><Reference package="apama.analyticsbuilder" type="BlockInfoRequest"/></Listens></Type><Type category="Monitor" name="GenericForwarder" private="true"><Description/><Summary/><TypeParameters/><Routes/><Emits/><Enqueues/><Sends/><Listens><Reference package="apama.analyticsbuilder" type="RequestForwarding"/></Listens></Type></Package></Packages>